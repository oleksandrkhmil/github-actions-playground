name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - name: Run tests
        run: make test

  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: detect-secrets
        uses: reviewdog/action-detect-secrets@v0.27
        with:
          reporter: github-pr-review
          detect_secrets_flags: --exclude-files '.*_test\.go$'

  govulncheck:
    name: Run govulncheck
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.3
      - name: Run govulncheck
        run: govulncheck -C . -format text ./...

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - name: Generate coverage report
        run: go test -coverprofile=coverage.out ./...
      - name: Check coverage
        id: coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "COVERAGE=$coverage" >> $GITHUB_OUTPUT
          echo "Coverage: $coverage%"
      - name: Fail if coverage is below threshold
        env:
          COVERAGE: ${{ steps.coverage.outputs.COVERAGE }}
        run: |
          if [ $COVERAGE -lt 80 ]; then
            echo "Coverage ($COVERAGE%) is below the threshold (80%)"
            exit 1
          fi
