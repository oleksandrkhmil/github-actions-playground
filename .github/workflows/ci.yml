name: CI

on:
  push:
    branches: main
  pull_request:
    branches: main

permissions: write-all

env:
  TESTS_COVERAGE_THRESHOLD: 80

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - name: Run tests
        run: make test

  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: detect-secrets
        uses: reviewdog/action-detect-secrets@v0.27
        with:
          reporter: github-pr-review
          detect_secrets_flags: --exclude-files '.*_test\.go$'

  govulncheck:
    name: Run govulncheck
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.3
      - name: Run govulncheck
        run: govulncheck -C . -format text ./...

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      foo: baz

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"
      - name: Generate coverage report
        run: go test -coverprofile=coverage.out ./...
      - name: Check coverage
        id: coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "COVERAGE=$coverage" >> $GITHUB_OUTPUT
          echo "Coverage: $coverage%"
      - name: Add comment with coverage
        env:
          COVERAGE: ${{ steps.coverage.outputs.COVERAGE }}
        uses: actions/github-script@v7
        with:
          script: |
            const {COVERAGE: coverage, TESTS_COVERAGE_THRESHOLD: threshold} = process.env
            const message = coverage < threshold
              ? `❌ Coverage (${coverage}%) is below the threshold (${threshold}%).`
              : `✅ Coverage (${coverage}%) satisfies the threshold (${threshold}%).`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
      - name: Fail if coverage is below the threshold
        env:
          COVERAGE: ${{ steps.coverage.outputs.COVERAGE }}
        if: ${{ env.COVERAGE < env.TESTS_COVERAGE_THRESHOLD }}
        uses: actions/github-script@v7
        with:
          script: |
            const {COVERAGE: coverage, TESTS_COVERAGE_THRESHOLD: threshold} = process.env
            core.setFailed(`Coverage (${coverage}%) is below the threshold (${threshold}%)`)
