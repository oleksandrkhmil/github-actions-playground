// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=blog_test -typed=true
//

// Package blog_test is a generated GoMock package.
package blog_test

import (
	context "context"
	reflect "reflect"

	blog "github.com/oleksandrkhmil/github-actions-playground/internal/domain/blog"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockrepository) Create(arg0 context.Context, arg1 blog.Post) (blog.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(blog.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockrepositoryMockRecorder) Create(arg0, arg1 any) *MockrepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockrepository)(nil).Create), arg0, arg1)
	return &MockrepositoryCreateCall{Call: call}
}

// MockrepositoryCreateCall wrap *gomock.Call
type MockrepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockrepositoryCreateCall) Return(arg0 blog.Post, arg1 error) *MockrepositoryCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockrepositoryCreateCall) Do(f func(context.Context, blog.Post) (blog.Post, error)) *MockrepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockrepositoryCreateCall) DoAndReturn(f func(context.Context, blog.Post) (blog.Post, error)) *MockrepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAll mocks base method.
func (m *Mockrepository) GetAll(arg0 context.Context) ([]blog.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]blog.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockrepositoryMockRecorder) GetAll(arg0 any) *MockrepositoryGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*Mockrepository)(nil).GetAll), arg0)
	return &MockrepositoryGetAllCall{Call: call}
}

// MockrepositoryGetAllCall wrap *gomock.Call
type MockrepositoryGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockrepositoryGetAllCall) Return(arg0 []blog.Post, arg1 error) *MockrepositoryGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockrepositoryGetAllCall) Do(f func(context.Context) ([]blog.Post, error)) *MockrepositoryGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockrepositoryGetAllCall) DoAndReturn(f func(context.Context) ([]blog.Post, error)) *MockrepositoryGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
